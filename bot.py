"""The module is a script for running the bot."""

from hammett.core import Bot, Button, Screen
from hammett.core.constants import DEFAULT_STATE, RenderConfig, SourceTypes
from hammett.core.mixins import StartMixin
from hammett.core.handlers import register_typing_handler
from hammett.core.handlers import register_button_handler

from database import save_user_list  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
from database import get_user_list
NEXT_SCREEN_DESCRIPTION = (
    'Good job üòé\n'
    'Now you see <b>NextScreen</b>. It also has a button. After pressing it, '
    '<b>StartScreen</b> re-renders into <b>NextScreen</b>.'
)

START_SCREEN_DESCRIPTION = (
    'Welcome to HammettSimpleJumpBot!\n'
    '\n'
    'This is <b>StartScreen</b> and it is a response to the /start command. '
    'Click the button below to jump to <b>NextScreen</b>.'
)

ARTISTLIST_SCREEN_DESCRIPTION = (
    '–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'
    '\n'
    '–ù–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω'
)

class NextScreen(Screen):
    """The class implements NextScreen, which is always sent as a new message."""

    description = NEXT_SCREEN_DESCRIPTION

    async def add_default_keyboard(self, _update, _context):
        """Set up the default keyboard for the screen."""
        return [[
            Button(
                '‚¨ÖÔ∏è Back',
                StartScreen,
                source_type=SourceTypes.MOVE_SOURCE_TYPE,
            ),
            
        ]]

class ArtistListEdit(Screen):

    description = ARTISTLIST_SCREEN_DESCRIPTION

    async def add_default_keyboard(self, _update, _context):
        return [[
            Button(
                '‚¨ÖÔ∏è Back',
                StartScreen,
                source_type=SourceTypes.MOVE_SOURCE_TYPE,
            ),
            
        ]]
    @register_typing_handler
    async def handle_text_input(self, update, context):
        user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_text = update.message.text
        items = [item.strip() for item in user_text.split(",")]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_user_list(user_id, items)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–í–∞—à —Å–ø–∏—Å–æ–∫: {', '.join(items)}"
        )
        await self.render(update, context, config=RenderConfig(
            as_new_message=True,
            keyboard=[
                [Button(
                    '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
                    StartScreen,
                    source_type=SourceTypes.MOVE_SOURCE_TYPE,
                )],
                ],
        ))
       
class ArtistListShow(Screen):
    description = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"

    async def add_default_keyboard(self, _update, _context):
        return [
            [
                Button(
                    'üéµ –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
                    source=self.show_artists_handler,  # –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    source_type=SourceTypes.HANDLER_SOURCE_TYPE,
                ),
            ],
            [
                Button(
                    '‚¨ÖÔ∏è Back',
                    StartScreen,
                    source_type=SourceTypes.MOVE_SOURCE_TYPE,
                )
            ]
        ]

    @register_button_handler
    async def show_artists_handler(self, update, context):
        user_id = update.callback_query.from_user.id
        artists = get_user_list(user_id)  # –§—É–Ω–∫—Ü–∏—è –∏–∑ database.py
        
        if not artists:
            await update.callback_query.answer(
                "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
                show_alert=True
            )
        else:
            artists_list = "\n".join(f"‚ñ´Ô∏è {artist}" for artist in artists)
            await update.callback_query.edit_message_text(
                f"üé§ –í–∞—à–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n\n{artists_list}\n\n–í—Å–µ–≥–æ: {len(artists)}"
            )
        
        return await self.move(update, context) 

class StartScreen(StartMixin):
    """The class implements StartScreen, which acts as a response
    to the /start command.
    """

    description = START_SCREEN_DESCRIPTION

    async def add_default_keyboard(self, _update, _context):
        """Set up the default keyboard for the screen."""
        return [
            [Button(
                'Next ‚û°Ô∏è',
                NextScreen,
                source_type=SourceTypes.JUMP_SOURCE_TYPE,
            )],
            [Button(
                '–°–æ–∑–¥–∞—Ç—å –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π',
                ArtistListEdit,
                source_type=SourceTypes.JUMP_SOURCE_TYPE)],
            [Button(
                '–ú–æ–π —Å–ø–∏—Å–æ–∫',
                ArtistListShow,
                source_type=SourceTypes.JUMP_SOURCE_TYPE)],
        ]


    
def main():
    """Run the bot."""
    bot = Bot(
        'HammettSimpleJumpBot',
        entry_point=StartScreen,
        states={
            DEFAULT_STATE: {NextScreen, StartScreen, ArtistListEdit, ArtistListShow},
        },
    )
    bot.run()


if __name__ == '__main__':
    main()
